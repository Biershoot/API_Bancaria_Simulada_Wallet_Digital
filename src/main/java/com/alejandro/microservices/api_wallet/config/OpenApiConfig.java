package com.alejandro.microservices.api_wallet.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class OpenApiConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        final String securitySchemeName = "bearerAuth";
        return new OpenAPI()
                .addSecurityItem(new SecurityRequirement().addList(securitySchemeName))
                .components(new Components()
                        .addSecuritySchemes(securitySchemeName,
                                new SecurityScheme()
                                        .name(securitySchemeName)
                                        .type(SecurityScheme.Type.HTTP)
                                        .scheme("bearer")
                                        .bearerFormat("JWT")))
                .info(new Info()
                        .title("üè¶ API Wallet Digital - Sistema Bancario Simulado")
                        .description("""
                                ## üìã Descripci√≥n del Proyecto
                                
                                API Wallet Digital es un sistema bancario simulado desarrollado con **Spring Boot** que implementa funcionalidades completas de autenticaci√≥n, autorizaci√≥n, gesti√≥n de wallets digitales y transferencias monetarias. El proyecto demuestra habilidades avanzadas en desarrollo backend, seguridad web y arquitectura de microservicios.
                                
                                ## üéØ Problem√°ticas Resueltas
                                
                                ### üîê **Seguridad en APIs**
                                - JWT Stateless Authentication con Refresh Tokens
                                - Token Blacklist Persistente para invalidaci√≥n inmediata
                                - Autorizaci√≥n Basada en Roles (ADMIN, USER)
                                
                                ### üí∞ **Gesti√≥n de Transacciones Financieras**
                                - Transacciones At√≥micas con garant√≠a de consistencia
                                - Validaciones de Negocio para prevenir operaciones inv√°lidas
                                - Notificaciones Autom√°ticas por email
                                - Auditor√≠a Completa de todas las operaciones
                                
                                ### üóÑÔ∏è **Performance y Optimizaci√≥n**
                                - √çndices Optimizados para consultas r√°pidas
                                - Connection Pooling para reutilizaci√≥n eficiente
                                - Limpieza Autom√°tica de datos obsoletos
                                - Scheduler para mantenimiento programado
                                
                                ## üõ†Ô∏è Stack Tecnol√≥gico
                                
                                - **Java 17** - Lenguaje de programaci√≥n principal
                                - **Spring Boot 3.2** - Framework de desarrollo
                                - **Spring Security 6.2** - Seguridad y autenticaci√≥n
                                - **JWT (jjwt 0.12.5)** - Tokens de autenticaci√≥n
                                - **MySQL 8.0** - Base de datos relacional
                                - **Swagger/OpenAPI 3** - Documentaci√≥n autom√°tica
                                
                                ## üöÄ Funcionalidades Principales
                                
                                - üîê **Autenticaci√≥n JWT** con Access Tokens (15 min) y Refresh Tokens (7 d√≠as)
                                - üõ°Ô∏è **Spring Security** con autorizaci√≥n basada en roles
                                - üí∞ **Gesti√≥n completa de wallets** digitales con transferencias
                                - üìß **Sistema de notificaciones** por email autom√°tico
                                - üßπ **Limpieza autom√°tica** de tokens expirados
                                - üîÑ **Sistema de blacklist** persistente para tokens
                                
                                ## üìä M√©tricas del Proyecto
                                
                                - **L√≠neas de c√≥digo**: 2,500+ l√≠neas
                                - **Endpoints API**: 20+ endpoints documentados
                                - **Entidades JPA**: 4 entidades principales
                                - **Servicios**: 6 servicios con l√≥gica de negocio
                                - **Controladores**: 5 controladores REST
                                
                                ## üîß Configuraci√≥n de Seguridad
                                
                                ### Usuarios de Prueba
                                - **Admin**: `admin` / `password` (Roles: ADMIN, USER)
                                - **Usuario**: `user` / `password` (Roles: USER)
                                
                                ### Endpoints por Rol
                                - **P√∫blicos**: `/auth/**`, `/swagger-ui/**`, `/api/email/**`
                                - **USER**: `/api/user/**`, `/api/wallet/**`
                                - **ADMIN**: `/api/admin/**`, `/api/user/**`, `/api/wallet/**`
                                
                                ## üìö Documentaci√≥n Completa
                                
                                Para m√°s detalles t√©cnicos, ver los archivos:
                                - `README.md` - Documentaci√≥n general del proyecto
                                - `TECHNICAL_DETAILS.md` - Detalles t√©cnicos avanzados
                                - `QUICK_DEMO.md` - Gu√≠a de demostraci√≥n r√°pida
                                - `ENDPOINTS_POSTMAN.md` - Colecci√≥n de Postman
                                """)
                        .version("1.0.0")
                        .contact(new Contact()
                                .name("Alejandro")
                                .email("alejandro@example.com")
                                .url("https://github.com/Biershoot")));
    }
}
