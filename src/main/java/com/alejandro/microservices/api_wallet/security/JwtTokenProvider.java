package com.alejandro.microservices.api_wallet.security;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.time.Instant;
import java.util.Date;

/**
 * üîê JWT Token Provider - Componente Core de Seguridad
 * 
 * Este componente implementa la generaci√≥n, validaci√≥n y gesti√≥n de tokens JWT
 * siguiendo las mejores pr√°cticas de seguridad para APIs REST.
 * 
 * üéØ Caracter√≠sticas Implementadas:
 * - Generaci√≥n de Access Tokens (15 min) y Refresh Tokens (7 d√≠as)
 * - Validaci√≥n robusta con manejo de excepciones
 * - Uso de algoritmos criptogr√°ficos seguros (HS256)
 * - Extracci√≥n segura de claims del token
 * 
 * üõ°Ô∏è Seguridad:
 * - Tokens de corta duraci√≥n para minimizar exposici√≥n
 * - Refresh tokens para renovaci√≥n autom√°tica
 * - Validaci√≥n completa de firma y expiraci√≥n
 * - Manejo seguro de excepciones sin informaci√≥n sensible
 * 
 * üìä M√©tricas de Seguridad:
 * - Access Token: 15 minutos (balance entre seguridad y UX)
 * - Refresh Token: 7 d√≠as (conveniencia del usuario)
 * - Algoritmo: HS256 (est√°ndar de la industria)
 * 
 * @author Alejandro
 * @version 1.0
 * @since 2024
 */
@Component
public class JwtTokenProvider {

    // üîë Configuraci√≥n de Seguridad - En producci√≥n usar variables de entorno
    private final String SECRET = "EstaEsUnaClaveMuySeguraParaJWT1234567890";
    
    // ‚è∞ Configuraci√≥n de Expiraci√≥n - Balance entre seguridad y experiencia de usuario
    private final long ACCESS_TOKEN_EXPIRATION = 900000; // 15 minutos (15 * 60 * 1000)
    private final long REFRESH_TOKEN_EXPIRATION = 604800000; // 7 d√≠as (7 * 24 * 60 * 60 * 1000)

    /**
     * üîë Genera la clave de firma para JWT usando HMAC-SHA256
     * 
     * Esta clave se usa para firmar y verificar todos los tokens JWT.
     * En producci√≥n, esta clave deber√≠a almacenarse en variables de entorno
     * o en un servicio de gesti√≥n de secretos (AWS Secrets Manager, HashiCorp Vault).
     * 
     * @return SecretKey para firmar tokens JWT
     */
    private SecretKey getSigningKey() {
        return Keys.hmacShaKeyFor(SECRET.getBytes());
    }

    /**
     * üöÄ Genera un Access Token JWT para autenticaci√≥n de corta duraci√≥n
     * 
     * Los access tokens tienen una duraci√≥n corta (15 minutos) para minimizar
     * el riesgo de exposici√≥n. Si un token es comprometido, el impacto es limitado.
     * 
     * üéØ Casos de Uso:
     * - Autenticaci√≥n en cada request a la API
     * - Acceso a recursos protegidos
     * - Operaciones sensibles (transferencias, consultas de balance)
     * 
     * @param username Identificador √∫nico del usuario
     * @return JWT Access Token firmado
     */
    public String generarAccessToken(String username) {
        return Jwts.builder()
                .subject(username)
                .issuedAt(new Date())
                .expiration(new Date(System.currentTimeMillis() + ACCESS_TOKEN_EXPIRATION))
                .signWith(getSigningKey())
                .compact();
    }

    /**
     * üîÑ Genera un Refresh Token JWT para renovaci√≥n autom√°tica
     * 
     * Los refresh tokens tienen una duraci√≥n larga (7 d√≠as) y se usan para
     * obtener nuevos access tokens sin requerir re-autenticaci√≥n del usuario.
     * 
     * üõ°Ô∏è Seguridad:
     * - Almacenado de forma segura en la base de datos
     * - Revocado inmediatamente en logout
     * - Validado contra la base de datos en cada uso
     * 
     * @param username Identificador √∫nico del usuario
     * @return JWT Refresh Token firmado
     */
    public String generarRefreshToken(String username) {
        return Jwts.builder()
                .subject(username)
                .issuedAt(new Date())
                .expiration(new Date(System.currentTimeMillis() + REFRESH_TOKEN_EXPIRATION))
                .signWith(getSigningKey())
                .compact();
    }

    /**
     * üîÑ M√©todo legacy para compatibilidad con c√≥digo existente
     * 
     * @deprecated Usar generarAccessToken() para mayor claridad
     * @param username Identificador √∫nico del usuario
     * @return JWT Access Token firmado
     */
    @Deprecated
    public String generarToken(String username) {
        return generarAccessToken(username);
    }

    /**
     * üîç Extrae el username del token JWT de forma segura
     * 
     * Este m√©todo valida la firma del token antes de extraer el subject,
     * asegurando que el token no ha sido manipulado.
     * 
     * ‚ö†Ô∏è Importante: Siempre validar el token antes de usar el username
     * 
     * @param token JWT token a procesar
     * @return Username extra√≠do del token
     * @throws JwtException si el token es inv√°lido
     */
    public String obtenerUsernameDelToken(String token) {
        return Jwts.parser()
                .verifyWith(getSigningKey())
                .build()
                .parseSignedClaims(token)
                .getPayload()
                .getSubject();
    }

    /**
     * ‚úÖ Valida si el token JWT es v√°lido y no ha expirado
     * 
     * Esta validaci√≥n incluye:
     * - Verificaci√≥n de la firma criptogr√°fica
     * - Validaci√≥n de la fecha de expiraci√≥n
     * - Verificaci√≥n del formato del token
     * 
     * üõ°Ô∏è Manejo de Errores:
     * - JwtException: Token malformado o manipulado
     * - IllegalArgumentException: Token nulo o vac√≠o
     * - ExpiredJwtException: Token expirado
     * 
     * @param token JWT token a validar
     * @return true si el token es v√°lido, false en caso contrario
     */
    public boolean validarToken(String token) {
        try {
            Jwts.parser()
                    .verifyWith(getSigningKey())
                    .build()
                    .parseSignedClaims(token);
            return true;
        } catch (JwtException | IllegalArgumentException e) {
            // üîí Log de seguridad (en producci√≥n usar logger apropiado)
            // logger.warn("Token validation failed: {}", e.getMessage());
            return false;
        }
    }

    /**
     * ‚è∞ Verifica si el token JWT ha expirado
     * 
     * √ötil para:
     * - Limpieza de tokens expirados
     * - Decisi√≥n de renovaci√≥n de tokens
     * - Auditor√≠a de seguridad
     * 
     * @param token JWT token a verificar
     * @return true si el token ha expirado, false si es v√°lido
     */
    public boolean tokenExpirado(String token) {
        try {
            Date expiration = Jwts.parser()
                    .verifyWith(getSigningKey())
                    .build()
                    .parseSignedClaims(token)
                    .getPayload()
                    .getExpiration();
            return expiration.before(new Date());
        } catch (JwtException | IllegalArgumentException e) {
            // üîí Si no se puede parsear, considerar como expirado por seguridad
            return true;
        }
    }

    /**
     * üìÖ Obtiene la fecha de expiraci√≥n del token JWT
     * 
     * √ötil para:
     * - Auditor√≠a de tokens
     * - Monitoreo de expiraci√≥n
     * - Gesti√≥n de blacklist
     * 
     * @param token JWT token a procesar
     * @return Date de expiraci√≥n del token
     * @throws JwtException si el token es inv√°lido
     */
    public Date obtenerFechaExpiracion(String token) {
        return Jwts.parser()
                .verifyWith(getSigningKey())
                .build()
                .parseSignedClaims(token)
                .getPayload()
                .getExpiration();
    }

    /**
     * ‚è±Ô∏è Obtiene la fecha de expiraci√≥n como Instant (Java 8+)
     * 
     * M√°s √∫til para operaciones con tiempo modernas y comparaciones
     * 
     * @param token JWT token a procesar
     * @return Instant de expiraci√≥n del token
     * @throws JwtException si el token es inv√°lido
     */
    public Instant obtenerFechaExpiracionInstant(String token) {
        Date expiration = obtenerFechaExpiracion(token);
        return expiration.toInstant();
    }
}
